# Make sure required CLI commands are installed
# ─────────────────────────────────────────────
require-module check_cli_commands

colorscheme palenight

# Symlink system autoload config
# ───────────────────────────────
evaluate-commands %sh{
    autoload="$kak_config/autoload"
        if [ ! -e "$autoload/default" ]; then
            mkdir -p "$autoload"
            ln -s "$kak_runtime/autoload" "$autoload/default"
        fi
}

# Highlighters
# ────────────
add-highlighter -override global/ number-lines -relative
add-highlighter -override global/ regex '\h+$' 0:Error

# Use ripgrep for searching files
# ───────────────────────────────
set-option -add global required_cli_commands "rg"
set-option current grepcmd "rg --line-number --no-heading"

# Set desired tabs/indent widths
# ──────────────────────────────
set-option global tabstop 4
set-option global indentwidth 4

# Select whole line, not including newline
# ────────────────────────────────────────
map global normal "X" "xH"

# Make ctags easier
# ─────────────────
map global normal <c-]> <a-i>w:ctags-search<ret>

# Making commenting easier
# ────────────────────────
map global normal "#" ": comment-line<ret>" -docstring "comment line"
map global normal "<a-#>" ": comment-block<ret>" -docstring "comment block"

# System clipboard handling
# ─────────────────────────
evaluate-commands %sh{
    if [ -n "$SSH_TTY" ]; then
        copy='printf "\033]52;;%s\033\\" $(base64 | tr -d "\n") > $( [ -n "$kak_client_pid" ] && echo /proc/$kak_client_pid/fd/0 || echo /dev/tty )'
        paste='printf "paste unsupported through ssh"'
        backend="OSC 52"
    else
        case $(uname) in
            Linux)
                if [ -n "$WAYLAND_DISPLAY" ]; then
                    copy="wl-copy -p"; paste="wl-paste -p"; backend=Wayland
                else
                    copy="xclip -i"; paste="xclip -o"; backend=X11
                fi
                ;;
            Darwin)  copy="pbcopy"; paste="pbpaste"; backend=OSX ;;
        esac
    fi

    printf "map global user -docstring 'paste (after) from clipboard' p '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s primary}<ret>'\n" "$copy" "$backend"
    printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s clipboard}<ret>'\n" "$copy -selection clipboard" "$backend"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
    printf "define-command -override echo-to-clipboard -params .. %%{ echo -to-shell-script '%s' -- %%arg{@} }" "$copy"
}
